//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;
use serde::{Serialize, Deserialize};
use lazy_static::lazy_static;
use fancy_regex::Regex;
use validator::{Validate, ValidationError};

lazy_static!{
    static ref PASSWORD_REGEX: Regex = Regex::new(r"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*?&])[A-Za-z\d$@$!%*?&]{8,20}$").unwrap();
}

fn password_validator(pwd: &str) -> Result<(), ValidationError> {
    if !PASSWORD_REGEX.is_match(pwd).unwrap() {
        return Err(ValidationError::new("Invalid password form"))
    }
    Ok(())
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, Validate)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,

    #[sea_orm(unique)]
    #[validate(length(min=1, max=20))]
    pub username: String,

    #[serde(skip_serializing)]
    #[validate(custom = "password_validator")]
    pub password: String,

    #[sea_orm(unique)]
    #[validate(email, length(max=255))]
    pub email: String,

    #[serde(skip_deserializing)]
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::todos::Entity")]
    Todos,
}

impl Related<super::todos::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Todos.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
